package org.learning;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.NoSuchElementException;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

/**
 * Optional is primarily intended for use as a method return type where there is a clear need to represent "no result,"
 * and where using null is likely to cause errors.
 */
class OptionalTest {

    @DisplayName("Optiional")
    @Test
    void test(){

        /*
            Creating optional
         */
        var opt1 = Optional.of(10); // If we pass null to this method it will throw NullPointerException
        var opt2 = Optional.ofNullable(null);
        var opt3 = Optional.empty();

        /*
            Checking for value
         */
        assertThat(opt1.isPresent()).isTrue();
        assertThat(opt2.isEmpty()).isTrue();

        /*
            Get value if present or default value
         */
        assertThat(opt1.get()).isEqualTo(10);
        assertThat(opt3.orElse("Default value")).isEqualTo("Default value");
        assertThat(opt3.orElseGet(() -> "Default value")).isEqualTo("Default value");

        /*
            If value not present return another optional containing value generated by supplier
         */
        var opt4 = opt3.or(() -> Optional.of("generated"));
        assertThat(opt4).contains("generated");

        /*
            Get value if present or throw Exception
         */
        assertThatThrownBy(() -> opt3.orElseThrow()).isInstanceOf(NoSuchElementException.class);
        assertThatThrownBy(() -> opt3.orElseThrow(() -> new RuntimeException())).isInstanceOf(RuntimeException.class);

        /*
            If present perform some action
         */
        opt1.ifPresent(
                val -> assertThat(val).isEqualTo(10)
        );
        opt3.ifPresentOrElse(
                (val) -> System.out.println(val),
                () -> System.out.println("Else condition")
        );

        /*
            stream, filter, map, flatMap
         */
    }

}
